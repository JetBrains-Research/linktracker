package org.intellij.plugin.tracker.settings;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;

/**
 * This class is associated with the form that displays the main settings page of the plugin
 *
 * It allows setting certain similarity thresholds for various elements being referenced by links.
 */
public class LinkTrackingSettingsForm {
    private JPanel mainPanel;
    private JSlider fileSimilaritySlider;
    private JLabel similarityThresholdLabel;
    private JLabel fileSimilarityLabel;
    private JLabel directorySimilarityLabel;
    private JSlider directorySimilaritySlider;
    private JLabel lineSimilarityLabel;
    private JSlider lineSimilaritySlider;
    private JCheckBox historyTraversalCheckBox;

    /**
     * Initializes the UI, returning the main panel object. But first, it initializes the slider values.
     */
    public JComponent getComponent() {
        initializeSliderValues(SimilarityThresholdSettings.Companion.getCurrentSimilarityThresholdSettings());
        initializeCheckboxes(FeatureSwitchSettings.Companion.getCurrentFeatureSwitchSettings());
        return mainPanel;
    }

    /**
     * Initializes the sliders' values to the values that have been previously saved
     *
     * If no values saved are found, then use the default values.
     */
    private void initializeCheckboxes(FeatureSwitchSettings featureSwitchSettings) {
        historyTraversalCheckBox.setSelected(featureSwitchSettings.getHistoryTraversalSwitch());
    }

    /**
     * Initializes the sliders' values to the values that have been previously saved
     *
     * If no values saved are found, then use the default values.
     */
    private void initializeSliderValues(SimilarityThresholdSettings similarityThresholdSettings) {
        fileSimilaritySlider.setValue(similarityThresholdSettings.getFileSimilarity());
        directorySimilaritySlider.setValue(similarityThresholdSettings.getDirectorySimilarity());
        lineSimilaritySlider.setValue(similarityThresholdSettings.getLineSimilarity());
    }

    /**
     * Resets the slider values to the similarity threshold values that have been previously saved
     */
    public void reset() {
        initializeSliderValues(SimilarityThresholdSettings.Companion.getCurrentSimilarityThresholdSettings());
        initializeCheckboxes(FeatureSwitchSettings.Companion.getCurrentFeatureSwitchSettings());
    }

    public boolean isModified() {
        return getSimilarityThresholdSettings().isModified() || getFeatureSwitchSettings().isModified();
    }

    public void saveValues() {
        SimilarityThresholdSettings.Companion.saveSetValues(getSimilarityThresholdSettings());
        FeatureSwitchSettings.Companion.saveFeatureSwitchSettings(getFeatureSwitchSettings());
    }

    /**
     * Get a SimilarityThresholdSettings object based on the values currently present in the settings page.
     */
    public SimilarityThresholdSettings getSimilarityThresholdSettings() {
        return new SimilarityThresholdSettings(
                fileSimilaritySlider.getValue(),
                directorySimilaritySlider.getValue(),
                lineSimilaritySlider.getValue());
    }

    /**
     * Get a FeatureSwitchSettings object based on the values currently present in the settings page.
     */
    public FeatureSwitchSettings getFeatureSwitchSettings() {
        return new FeatureSwitchSettings(historyTraversalCheckBox.isSelected());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(7, 6, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        similarityThresholdLabel = new JLabel();
        similarityThresholdLabel.setText("Similarity Thresholds");
        panel2.add(similarityThresholdLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        panel2.add(separator1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(6, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        fileSimilarityLabel = new JLabel();
        fileSimilarityLabel.setText("File similarity");
        panel1.add(fileSimilarityLabel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fileSimilaritySlider = new JSlider();
        fileSimilaritySlider.setMajorTickSpacing(20);
        fileSimilaritySlider.setPaintLabels(true);
        fileSimilaritySlider.setPaintTicks(true);
        fileSimilaritySlider.setSnapToTicks(true);
        panel1.add(fileSimilaritySlider, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel4, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel5, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        directorySimilarityLabel = new JLabel();
        directorySimilarityLabel.setText("Directory similarity");
        panel1.add(directorySimilarityLabel, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        directorySimilaritySlider = new JSlider();
        directorySimilaritySlider.setMajorTickSpacing(20);
        directorySimilaritySlider.setPaintLabels(true);
        directorySimilaritySlider.setPaintTicks(true);
        directorySimilaritySlider.setSnapToTicks(true);
        panel1.add(directorySimilaritySlider, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator2 = new JSeparator();
        panel1.add(separator2, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JSeparator separator3 = new JSeparator();
        panel1.add(separator3, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 1, false));
        lineSimilarityLabel = new JLabel();
        lineSimilarityLabel.setText("Line similarity");
        panel1.add(lineSimilarityLabel, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lineSimilaritySlider = new JSlider();
        lineSimilaritySlider.setMajorTickSpacing(20);
        lineSimilaritySlider.setPaintLabels(true);
        lineSimilaritySlider.setPaintTicks(true);
        lineSimilaritySlider.setSnapToTicks(true);
        panel1.add(lineSimilaritySlider, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel6, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}