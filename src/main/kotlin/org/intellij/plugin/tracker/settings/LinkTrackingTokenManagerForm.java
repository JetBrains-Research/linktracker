package org.intellij.plugin.tracker.settings;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import jdk.jfr.Description;
import kotlin.Pair;
import org.intellij.plugin.tracker.data.UserInfo;
import org.intellij.plugin.tracker.utils.CredentialsManager;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

/**
 * This class is associated with the form that displays the token management settings page.
 *
 * It allows editing and saving tokens for given usernames and platforms.
 */
@jdk.jfr.Label("Experimental")
@Description("Remote web links are not supported as of yet")
public class LinkTrackingTokenManagerForm {
    private JPanel mainPanel;
    private JTable mainTable;
    private JTextPane linksToCodeThatTextPane;
    private DefaultTableModel model = new DefaultTableModel();

    /**
     * Constants representing the column names
     */
    private final String USERNAME_COLUMN = "Username";
    private final String TOKEN_COLUMN = "Token";
    private final String PLATFORM_COLUMN = "Platform";

    /**
     * Initializes the UI, by returning the main panel object.
     */
    public JComponent getComponent() {
        return mainPanel;
    }

    public List<UserInfo> getSavedState() {
        List<UserInfo> list = new ArrayList<>();
        for (int i = 0; i < mainTable.getRowCount(); i++) {
            final String username = (String) mainTable.getValueAt(i, 0);
            final String platformName = (String) mainTable.getValueAt(i, 2);
            final String token = CredentialsManager.Companion.getCredentials(platformName, username);
            list.add(new UserInfo(username, token, platformName));
        }
        return list;
    }

    /**
     * Get a list of user info based on the credentials that are present in the token management
     * settings page
     */
    public List<UserInfo> getCurrentState() {
        List<UserInfo> list = new ArrayList<>();
        for (int i = 0; i < mainTable.getRowCount(); i++) {
            final String username = (String) mainTable.getValueAt(i, 0);
            final String token = (String) mainTable.getValueAt(i, 1);
            final String platform = (String) mainTable.getValueAt(i, 2);

            list.add(new UserInfo(username, token, platform));
        }
        return list;
    }

    /**
     * Updates a table with the previously saved state
     */
    public void updateTable() {
        List<UserInfo> list = getSavedState();
        for (int i = 0; i < mainTable.getRowCount(); i++) {
            final String username = (String) mainTable.getValueAt(i, 0);
            final String platform = (String) mainTable.getValueAt(i, 2);

            for (UserInfo userInfo : list) {
                if (platform.equals(userInfo.getPlatform()) && username.equals(userInfo.getUsername())) {
                    mainTable.setValueAt(userInfo.getToken(), i, 1);
                    break;
                }
            }
        }
    }

    /**
     * Initializes the table based on the values that were fetched from the project previously
     */
    public void initializeTable(List<Pair<String, String>> list) {
        model.addColumn(USERNAME_COLUMN);
        model.addColumn(TOKEN_COLUMN);
        model.addColumn(PLATFORM_COLUMN);
        mainTable.setModel(model);

        if (list.isEmpty()) return;

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        for (int i = 0; i < mainTable.getColumnCount(); i++) {
            mainTable.getColumn(mainTable.getColumnName(i)).setCellRenderer(centerRenderer);
        }

        for (Pair pair : list) {
            final String username = (String) pair.getFirst();
            final String platform = (String) pair.getSecond();
            Vector<Object> rowVector = new Vector<>();
            rowVector.add(username);
            rowVector.add(CredentialsManager.Companion.getCredentials(platform, username));
            rowVector.add(platform);
            model.addRow(rowVector);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Token Manager");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        panel1.add(separator1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 1, false));
        linksToCodeThatTextPane = new JTextPane();
        linksToCodeThatTextPane.setText("Links to code that do not correspond to the current open project require authentication. The authentication is done using a custom Personal Access Token (PAT). At the moment, only links to code hosted on GitHub are tracked.");
        panel1.add(linksToCodeThatTextPane, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        mainTable = new JTable();
        mainTable.setIntercellSpacing(new Dimension(3, 1));
        scrollPane1.setViewportView(mainTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}